"use strict";var S=Object.create;var u=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var $=(e,t)=>{for(var s in t)u(e,s,{get:t[s],enumerable:!0})},x=(e,t,s,c)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of D(t))!N.call(e,i)&&i!==s&&u(e,i,{get:()=>t[i],enumerable:!(c=k(t,i))||c.enumerable});return e};var p=(e,t,s)=>(s=e!=null?S(T(e)):{},x(t||!e||!e.__esModule?u(s,"default",{value:e,enumerable:!0}):s,e)),A=e=>x(u({},"__esModule",{value:!0}),e);var O={};$(O,{activate:()=>J,deactivate:()=>M});module.exports=A(O);var n=p(require("vscode")),f=p(require("path")),b=p(require("child_process"));function g(e,t=[],s){return new Promise((c,i)=>{let d=b.spawn(e,t),r="",a="";s&&(d.stdin.write(s),d.stdin.end()),d.stdout.on("data",o=>r+=o.toString()),d.stderr.on("data",o=>a+=o.toString()),d.on("close",o=>{o===0?c(r.trim()):i(new Error(a.trim()||`Process exited with code ${o}`))})})}async function E(e){try{return await g(e,["--version"]),!0}catch{return!1}}async function J(e){let t=["jsonnet","jq","yq"],s=[];for(let r of t)await E(r)||s.push(r);if(s.length>0){n.window.showWarningMessage(`Jsonnet Renderer: Missing required tools: ${s.join(", ")}. Please install them and reload.`);return}let c=new Map,i=n.workspace.registerTextDocumentContentProvider("rendered",{provideTextDocumentContent(r){return c.get(r.toString())||""}});n.workspace.onDidCloseTextDocument(r=>{r.uri.scheme==="rendered"&&c.delete(r.uri.toString())}),e.subscriptions.push(i);let d=n.commands.registerCommand("jsonnetRenderer.renderFile",async r=>{let a=r.fsPath;if(!a.endsWith(".jsonnet")&&!a.endsWith(".libsonnet")){n.window.showErrorMessage("Not a Jsonnet/libsonnet file.");return}try{let o=await g("jsonnet",[a]),l;try{l=JSON.parse(o)}catch{throw new Error("Failed to parse JSON output from jsonnet.")}let m=[];Array.isArray(l)?m=l:l.items&&Array.isArray(l.items)?m=l.items:m=[l];let w="",h=!1;for(let y of m){let C=await g("yq",["-P"],JSON.stringify(y));h===!1?w+=`${C}
---
`:h=!1}let P=`rendered_${f.basename(a,f.extname(a))}.yaml`,v=n.Uri.parse(`rendered:${P}`);c.set(v.toString(),w);let j=await n.workspace.openTextDocument(v);n.window.showTextDocument(j,{preview:!1})}catch(o){n.window.showErrorMessage(`Render failed: ${o.message}`)}});e.subscriptions.push(d)}function M(){}0&&(module.exports={activate,deactivate});
